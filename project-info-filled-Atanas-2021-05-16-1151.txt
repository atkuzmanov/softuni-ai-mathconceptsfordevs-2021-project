# Math Concepts for Developers
## Final Project

### Terms and conditions:
By submitting your project for the exam, you agree with the following:
* Use Jupyter notebook for text and maths. You can use any programming language you would like.
* Write your research and code in English. Bulgarian is also acceptable but try to use English.
* If you have sensitive, copyrighted, or copy-protected assets, including but not limited to, images, multimedia, code, documents, and datasets,
  you can sign an NDA (non-disclosure agreement) with the SoftUni team. Contact the lecturer if you need assistance with the process.
* Any code which does not comply with the Bulgarian law (as of the exam date), will be given zero points.
* Any malicious code, or code intended to do harm to the user's computer, information, or privacy, will be given zero points.

### Self-assessment:
The numbers in brackets define possible points for the corresponding item.

1. Problem statement (0-10)
	* How well is the problem defined?
	* Does the research address a real-life problem?
	* Does the research solve the correct problem?
2. Layout (0-20)
	* Are the document sections structured properly?
	* Is the article well-formatted (in terms of readability)?
3. Code quality (0-20)
	* Is the code well-written? Is the code self-documenting?
	* Is the code organized into functions?
	* Is the code generally well-structured?
4. Previous research (0-10)
	* Have you cited at least two other sources?
	* Does the project contain comparisons between the current and the previous results?
5. Gathering / generating, cleaning, and formatting data (0-10)
	* Every problem deals with "real-world" data in some way. Even if you don't use datasets, you'll likely generate some data
	* How is the data gathered?
	* Is the process statistically valid?
	* Is the process of data acquisition, data cleaning, and data manipulation well documented?
6. Testing (0-10)
	* This can have various meanings: unit testing, hypothesis testing, train / test data set, etc.
	* Is the code thoroughly tested?
	* Are there any comparisons to other implementations / other articles / previous research?
7. Visualization (0-10)
	* All kinds of projects employ some visualization: graphical plots, tables, etc.
	* Are all visualizations correct (i.e. convey the intended meaning without misleading the intended audience)?
	* Are all visualizations clear, and easy to understand?
8. Communication (0-10)
	* Does the project tell the story correctly?
	* Does the project serve the audience it was intended for?

### Self-assessment and notes filled in by Atanas Kuzmanov:

1. Problem statement (10)
	* The problem is clearly stated in the "Subtitle" section, discussed in the "Abstract" section , and further discussed and explored using the Scientific Method and solved in the "Show a practical use of PCA, for example, trying to see features in a 15D space, projected in 3D." section.

2. Layout (19)
	* The layout is well structured with different sections well emphasized and differentiated.
	* A structure of nested headlines using Markdown has been used.
	* Additional layout elements, such as horizontal lines have been used to further support readability and structure of the layout.
	* Different fonts such as bold, italic etc. have been used.
	* Use of Code cells, LaTeX, graphs and images have been used and positioned according to the flow of the article.
	* References, links and anchor tags have been used to link to different sections for easier navigation.
	
	* The only downside, which I can currently think of at the time of writing this is that the project is a bit lengthy. This however can be alleviated by using the Jupyter Notebook Nbextensions, and the "toc2" extension in particular, which is what I have been using.

3. Code quality (18)
	* Currently only the code in the Show some applications of PCA, e.g. reducing a 3D image to its first 2 principal components, plotting the 3D and 2D images. section has been refactored into separate functions and most of the other code in the article is left fragmented. There is a very good reason for this, which is that the aim of this article is to understand PCA and the mathematics behind it and use code to aid us to that. This is why the fragments of code throughout this article are used to help us understand PCA and the mathematics behind it and illustrate and demonstrated different parts and PCA as a whole.
	* Most of the commented out code in this article is left on purpose to serve as information, as part of the intent for this article is for it to be a knowledgebase.

4. Previous research (10)
	* 

5. Gathering / generating, cleaning, and formatting data (10)

6. Testing (5)

7. Visualization (10)

8. Communication (10)

